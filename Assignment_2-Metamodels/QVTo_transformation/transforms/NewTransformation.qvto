modeltype CCL uses "http://glt.tue.nl/ccl";
modeltype Graph uses "http://glt.tue.nl/graph";

transformation NewTransformation(in imodel : CCL, out omodel : Graph);

main() {
	imodel.rootObjects()[CloudResources]->map toModel();
}

mapping CCL::CloudResources::toModel(): Graph::Graph {
	var MIs = self.resources.machineImages->map toNode();
	nodes += MIs;
	nodes += self.resources->map toNode();
	MIs.allInstances(Graph::Edge)->forEach(edge) {
		nodes += edge.target;
	};
	name := "Generated graph";
}

mapping CCL::Resource::toNode(): Graph::Node {
	outEdges := self.machineImages[MachineImage]->map toEdge();
	label := self.label;
}

mapping CCL::MachineImage::toNode(): Graph::Node {
	label := self.label;
	outEdges += object Graph::Edge {
		style := Graph::Style::DOTTED;
		target := object Graph::Node {
			label := (self.storageSize.toString() + " GB");
			shape := Graph::Shape::OVAL;
		}
	};
}

query CCL::MachineImage::nodes(): Set(Graph::Node) {
	var nodes: Set(Graph::Node);
	nodes += self.resolveone(Graph::Node);
	return nodes;
}

mapping CCL::MachineImage::toEdge(): Graph::Edge {
	log(self.resolveone(Graph::Node).label);
	target := self.resolveone(Graph::Node);
}

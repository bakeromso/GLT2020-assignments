modeltype CCL uses "http://glt.tue.nl/ccl";
modeltype Graph uses "http://glt.tue.nl/graph";

transformation NewTransformation(in imodel : CCL, out omodel : Graph);

main() {
	imodel.rootObjects()[CloudResources]->map toModel();
}

mapping CCL::CloudResources::toModel(): Graph::Graph {
	name := "Generated graph";

	self.resources.machineImages->map toNode();
	
	nodes += self.resources->map toNode().allNodes();
	
	nodes += self.resources.machineImages.region->map toNode(self).allNodes();
}

// Recursively creates a set of all nodes that are children of the node and the node itself.
query Graph::Node::allNodes(): Set(Graph::Node) {
	var nodes: Set(Graph::Node);
	nodes += self;
	self.outEdges->forEach(e) {
		nodes += e.target.allNodes();
	};
	return nodes;
}

mapping CCL::Resource::toNode(): Graph::Node {
	outEdges := self.machineImages->map toEdge();
	label := self.label;
}

mapping CCL::MachineImage::toNode(): Graph::Node {
	label := self.label;
	var children: Set(Graph::Node);
	
	// Storage node:
	children += object Graph::Node {
		label := (self.storageSize.toString() + " GB");
		shape := Graph::Shape::OVAL;
	};
	
	// Storage/Computing dependent nodes:
	if self.oclIsTypeOf(CCL::ComputingImage) then {
		var os := self.oclAsType(CCL::ComputingImage).os.toString().toLower().firstToUpper();
		children += object Graph::Node {
			label := os;
			shape := Graph::Shape::OVAL;
		};
		children += object Graph::Node {
			label := self.vcpu.toString();
			shape := Graph::Shape::OVAL;
		};
	} else { // It is a CCL::StorageImage
		var engine := self.oclAsType(CCL::StorageImage).dbEngine.toString().FormatDBEngineString();
		children += object Graph::Node {
			label := engine;
			shape := Graph::Shape::OVAL;
		};
	} endif;
	
	// Create edges for the new nodes:
	children->forEach(child) {
		outEdges += object Graph::Edge {
			style := Graph::Style::DOTTED;
			target := child
		};
	};
}

mapping CCL::MachineImage::toEdge(): Graph::Edge {
	target := self.resolveone(Graph::Node);
}

mapping CCL::Region::toNode(root: CCL::CloudResources): Graph::Node {
	label := self.toString().toLower().firstToUpper();
	var children: Set(Graph::Node);
	
	var si := root.resources.machineImages->select(mi | mi.region = self and mi.oclIsTypeOf(CCL::StorageImage));
	var ci := root.resources.machineImages->select(mi | mi.region = self and mi.oclIsTypeOf(CCL::ComputingImage));
	if si->size() > 0 then {
		var siNode := object Graph::Node { label := 'Storage'; outEdges := si->map toEdge().clone(); };
		outEdges += object Graph::Edge { target := siNode; };
	} endif;
	if ci->size() > 0 then {
		var ciNode := object Graph::Node { label := 'Computing'; outEdges := ci->map toEdge().clone(); };
		outEdges += object Graph::Edge { target := ciNode; };
	} endif;
}

query String::FormatDBEngineString(): String {
	var str = self;
	switch {
		case (self = 'MYSQL') str := 'MySQL';
		case (self = 'POSTGRESQL') str := 'PostgreSQL';
		case (self = 'MARIADB') str := 'MariaDB';
		case (self = 'ORACLE') str := 'Oracle';
		case (self = 'SQLSERVER') str := 'SQL Server';
	};
	return str;
}
